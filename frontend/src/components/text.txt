import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import VideoModal from './videoplayer';
import {
  Paper,
  Typography,
  TableContainer,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  CircularProgress,
  Chip,
} from "@mui/material";

const TestResultPage = () => {
  const { testId } = useParams();
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(true);

useEffect(() => {
   

  const userToken = localStorage.getItem("user_token");
  if (!userToken) {
    console.error("No auth token found");
    setLoading(false);
    return;
  }

  axios.get(`http://localhost:8000/api/test-attempt-results/?test_id=${testId}`, {
      headers: {
        Authorization: `Token ${userToken}`, // 🔐 Pass token here
      },
    })
    .then((res) => {
      setResults(res.data);
      setLoading(false);
    })
    .catch((err) => {
      console.error("Error fetching results", err);
      setLoading(false);
    });
     console.log("Fetched results:", results);
}, [testId]);
 console.log("Fetched results:", results);
  if (loading) return <CircularProgress sx={{ m: 4 }} />;

  return (
    <Paper sx={{ p: 4, m: 4 }}>
      <Typography variant="h5" gutterBottom>
        Results for Test #{testId}
      </Typography>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell><b>Name</b></TableCell>
              <TableCell><b>Email</b></TableCell>
              <TableCell><b>Score</b></TableCell>
              <TableCell><b>Result</b></TableCell>
              <TableCell><b>Time Taken</b></TableCell>
              <TableCell><b>Recording</b></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {results.map((attempt) => (
              <TableRow key={attempt.id}>
                <TableCell>{attempt.name}</TableCell>
                <TableCell>{attempt.email}</TableCell>
                <TableCell>{attempt.score !== null ? `${attempt.score}%` : 'Not Evaluated'}</TableCell>
                <TableCell>
                  <Chip
                    label={attempt.passed ? "Passed" : "Failed"}
                    color={attempt.passed ? "success" : "error"}
                    size="small"
                  />
                </TableCell>
                <TableCell>{attempt.time_taken || "-"}</TableCell>
                <TableCell>
                <VideoModal
                      videoUrl={`http://localhost:8000/api/protected-video/?name=${attempt.name}&test_id=${testId}`}
                      name={attempt.name}
                      />
              </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
};

export default TestResultPage;



import React, { useState, useEffect } from 'react';
import {
  Modal,
  Box,
  IconButton,
  Tooltip,
  Typography
} from '@mui/material';
import PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';
import CloseIcon from '@mui/icons-material/Close';

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '80%',
  maxWidth: 800,
  bgcolor: 'background.paper',
  boxShadow: 24,
  p: 2,
  borderRadius: 2,
};

const VideoModal = ({ name, testId }) => {
  const [open, setOpen] = useState(false);
  const [videoUrl, setVideoUrl] = useState("");

  useEffect(() => {
    if (!open || !name || !testId) return;

    const fetchVideoUrl = async () => {
      const token = localStorage.getItem("user_token");
      console.log(token)
      try {
        const res = await fetch(
          `http://localhost:8000/api/protected-video/?name=${name}&test_id=${testId}`,
          {
            headers: {
              Authorization: `Token ${token}`,
            },
          }
        );
        if (!res.ok) throw new Error("Video fetch failed");
        const data = await res.json();
        setVideoUrl(data.video_url);
      } catch (err) {
        console.error("Video fetch error:", err);
        setVideoUrl(null);
      }
    };

    fetchVideoUrl();
  }, [open, name, testId]);

  return (
    <>
      <Tooltip title="Watch Recording">
        <IconButton onClick={() => setOpen(true)} color="primary">
          <PlayCircleOutlineIcon />
        </IconButton>
      </Tooltip>

      <Modal open={open} onClose={() => setOpen(false)}>
        <Box sx={style}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">Proctoring Video: {name}</Typography>
            <IconButton onClick={() => setOpen(false)}>
              <CloseIcon />
            </IconButton>
          </Box>
          {videoUrl ? (
            <video width="100%" height="auto" controls>
              <source src={videoUrl} type="video/webm" />
              Your browser does not support the video tag.
            </video>
          ) : (
            <Typography>No recording available</Typography>
          )}
        </Box>
      </Modal>
    </>
  );
};

export default VideoModal;


class ProtectedVideoView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        name = request.query_params.get('name')
        test_id = request.query_params.get('test_id')

        if not name or not test_id:
            return Response({'error': 'Missing parameters'}, status=status.HTTP_400_BAD_REQUEST)

        # Construct the path: logs/{name}_{test_id}/proctoring_recording.webm
        relative_path = f"logs/{name}_{test_id}/proctoring_recording.webm"
        video_path = os.path.join(settings.MEDIA_ROOT, relative_path)

        if os.path.exists(video_path):
            return Response({
                "video_url": f"{settings.MEDIA_URL}{relative_path}"
            })
        else:
            return Response({'error': 'Video not found'}, status=status.HTTP_404_NOT_FOUND)
            
class TestAttemptResultViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = TestAttemptResultSerializer
    permission_classes = [IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        test_id = self.request.query_params.get("test_id")
        if test_id:
            return TestAttempt.objects.filter(test_id=test_id).order_by("-score")
        return TestAttempt.objects.none()


|
class TestAttemptResultSerializer(serializers.ModelSerializer):
    name = serializers.SerializerMethodField()
    time_taken = serializers.SerializerMethodField()
    passed = serializers.SerializerMethodField()
    video_url = serializers.SerializerMethodField()  # ⬅️ New

    class Meta:
        model = TestAttempt
        fields = [
            'id',
            'name',
            'email',
            'score',
            'status',
            'time_taken',
            'rank',
            'accuracy',
            'total_questions',
            'correct_answers',
            'passed',
            'video_url',  # ⬅️ Add here
        ]

    def get_name(self, obj):
        participant = TestParticipant.objects.filter(email=obj.email, test=obj.test).first()
        return participant.name if participant else obj.email

    def get_time_taken(self, obj):
        if obj.start_time and obj.end_time:
            duration = obj.end_time - obj.start_time
            total_seconds = int(duration.total_seconds())
            minutes, seconds = divmod(total_seconds, 60)
            return f"{minutes:02}:{seconds:02}"
        return "-"

    def get_passed(self, obj):
        if obj.score is not None and obj.test.pass_criteria is not None:
            return obj.score >= obj.test.pass_criteria
        return False

    def get_video_url(self, obj):
        
        request = self.context.get("request")
        participant = TestParticipant.objects.filter(email=obj.email, test=obj.test).first()
        name = participant.name if participant else obj.email
        if not name or not obj.test_id:
            return None

        encoded_name = quote(name.replace(" ", "_"))
        return request.build_absolute_uri(
            f"/api/protected-video/?name={encoded_name}&test_id={obj.test_id}"
        )

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import TestViewSet, TestAttemptViewSet,submit_test,user_attempted_tests,user_test_stats,leaderboard,UserAnswerViewSet, QuestionViewSet
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from django.conf import settings
from . import views

from django.conf.urls.static import static
from .views import (ProtectedVideoView,TestAttemptResultViewSet,UploadQuestionsView, log_malpractice, ParseUploadedQuestionsView, save_proctoring_video,
    LoginView, RegisterView,RecentActivityDeleteView,get_csrf_token, get_test_questions,create_test, CategoryListCreateView, get_tests,
    CategoryRetrieveUpdateDestroyView, UserTestStatsAPIView, TestListCreateView, AvailableTestsView,
    RecentActivityListCreateView, QuestionCreateAPIView, TestDetailAPIView, ManageTestsViewSet,
    QuestionListCreateView, QuestionDetailAPIView, UserResponseListCreateView,complete_test,
    PerformanceHistoryView, UserProfileView, AttemptedTestViewSet, AdminSettingsViewSet,AnnouncementDetailView,
    PerformerListCreateView, PerformerRetrieveUpdateDestroyView, FeatureListCreateView,
    AnnouncementViewSet, get_user_info, FeatureRetrieveUpdateDestroyView, TestimonialListCreateView,
    TestimonialRetrieveUpdateDestroyView, FAQListCreateView, FAQRetrieveUpdateDestroyView,
    AchievementView,user_management_stats,request_otp,verify_otp,mark_notifications_as_read,duplicate_test,
    PasswordResetView, ContactMessageView,AdminNotificationViewSet, dashboard_view,test_management_view,
    NotificationViewSet, TestSummaryList,CaptureImageView,test_report,test_overview_view,test_completion_rate_view,
    UserSettingsView, CompletedTestCreateView, dashboards_overview, analytics_report,CompletedTestViewSet,
    user_management_overview,UserProfileViewSet, enroll_student,save_consent, FeedbackViewSet, AchievementsView,
    AchievementRetrieveUpdateDestroyView,PerformanceStatListCreateView, ReviewAPIView, ExportAPIView
)

router = DefaultRouter()
admin_notification_list = AdminNotificationViewSet.as_view({'get': 'list'})
router.register(r'test-attempt-results', TestAttemptResultViewSet, basename='test-attempt-results')
router.register(r'manage-tests', ManageTestsViewSet)
router.register(r'tests', TestViewSet)
router.register(r'attempted-tests', AttemptedTestViewSet, basename='attempted-test')
router.register(r'answers', UserAnswerViewSet)
router.register(r"completed-tests", CompletedTestViewSet, basename="completed-tests")
router.register(r'questions', QuestionViewSet)
router.register(r'users', UserProfileViewSet, basename='user')
router.register(r'announcements', AnnouncementViewSet, basename='announcement')
router.register(r'notifications', NotificationViewSet, basename='notification')
router.register(r'attempts', TestAttemptViewSet, basename='testattempt') 
test_attempt_viewset = TestAttemptViewSet.as_view({
    'get': 'get_user_statistics', 
    'get': 'get_user_rank', # Maps GET requests to get_user_statistics
})
urlpatterns = [
    path('protected-video/', ProtectedVideoView.as_view(), name='protected-video'),
    path("save-proctoring-video/", save_proctoring_video),
    path("parse-questions/", ParseUploadedQuestionsView.as_view(), name="parse-questions"),
    path('log-malpractice/', log_malpractice, name='log-malpractice'),
    path('capture/', CaptureImageView.as_view(), name='capture-image'),
    path('questions/tests/<int:test_id>/', views.get_questions_from_test, name='get_questions_from_test'),
    path('decode-test-uuid/<str:uuid_str>/', views.decode_uuid_and_get_test_id),
    path("notifications/mark-as-read/", mark_notifications_as_read, name="mark-notifications-as-read"),
    path('forgot-password/request-otp/', request_otp, name="request_otp"),
    path('forgot-password/verify-otp/', verify_otp, name="verify_otp"),
    path('user-management-stats/', user_management_stats, name='user-management-stats'),
    path('achievements/', AchievementView.as_view(), name='achievements'),
    path('admin-notifications/', admin_notification_list, name='admin-notifications'),
    path("test-report/<int:test_id>/",test_report, name="test-report"),
    path('userss/<int:pk>/', UserProfileViewSet.as_view({'get': 'retrieve'}), name='user-profile'),
    path('tests/<str:test_id>/save_consent/', save_consent, name='save_consent'),
    path('feedbacks/', FeedbackViewSet.as_view({'get': 'list', 'post': 'create'}), name='feedback-list'),
    path('analytics/', analytics_report, name='analytics-report'),
    path('dashboard/', dashboards_overview, name='dashboard-overview'),
    path('user-managements/', user_management_overview, name='user-management'),
    path('enroll/', enroll_student, name='enroll-student'),
    path('test-users/', views.register_test_user, name='register_test_user'),
    path('tests/<int:pk>/review/', ReviewAPIView.as_view(), name='test-review'),
    path('tests/<int:pk>/export/', ExportAPIView.as_view(), name='test-export'),
    path('dashboard-overview/', dashboard_view, name='dashboard-overview'),
    path('tests-data/', test_overview_view, name='get-tests-data'),
    path('test/', get_tests, name='get-tests'),
    path('tests/public/', views.public_tests, name='public-tests'),
    path('tests/<int:test_id>/questions/', views.get_questions_from_test, name='get-questions-from-test'),
    path('tests/import-questions/', views.import_questions, name='import-questions'),
    path('userss/', get_user_info, name='get-user-info'),
    path('available-tests/', AvailableTestsView.as_view(), name='available-tests'),
    path('performance-history/', PerformanceHistoryView.as_view(), name='performance-history'),
    path('user-settings/', UserSettingsView.as_view(), name='user-settings'),
    path('user-settings/reset/', UserSettingsView.as_view(), name='user-settings-reset'),
    path('assessments/online-exams/<str:long_test_id>/get-questions/', get_test_questions, name='get-test-questions'),
    path('user-data/', UserProfileView.as_view(), name='user-data'),
    path('completed-testss/', CompletedTestCreateView.as_view(), name='completed-tests'),
    path('performance-stats/', PerformanceStatListCreateView.as_view(), name='performance-stats'),
    path('recent-activities/', RecentActivityListCreateView.as_view(), name='recent-activities'),
    path('get-secure-uuid/<int:testid>/', views.get_secure_uuid),
    path('test-attempts/<int:pk>/export_certificate/', 
         TestAttemptViewSet.as_view({'get': 'export_certificate'}), 
         name='export_certificate'),
    path('recent-activities/<int:pk>/', RecentActivityDeleteView.as_view(), name='delete-recent-activity'),
    path('test/create/', create_test, name='create-test'),
    path('login/', LoginView.as_view(), name='login'),
    path('categories/', CategoryListCreateView.as_view(), name='category-list-create'),
    path('categories/<int:pk>/', CategoryRetrieveUpdateDestroyView.as_view(), name='category-detail'),
    path('test/', TestListCreateView.as_view(), name='test-list-create'),
    path('upload-allowed-emails/', views.upload_allowed_emails, name='upload_allowed_emails'),
    path('tests/<int:pk>/', TestDetailAPIView.as_view(), name='test-detail'),
    path('question/', QuestionListCreateView.as_view(), name='question-list-create'),
    path('question/<int:pk>/', QuestionDetailAPIView.as_view(), name='question-detail'),
    path('test-summary/', TestSummaryList.as_view(), name='test-summary'),
    path('test-attempts/<int:pk>/review/', TestAttemptViewSet.as_view({'get': 'review'}), name='test-attempt-review'),
    path('user-responses/', UserResponseListCreateView.as_view(), name='user-responses'),
    path('user-profile/', UserProfileView.as_view(), name='user-profile'),
    path('admin-settings/', AdminSettingsViewSet.as_view({'get': 'list', 'post': 'create'}), name='admin-settings'),
    path('performers/', PerformerListCreateView.as_view(), name='performer-list-create'),
    path('performers/<int:pk>/', PerformerRetrieveUpdateDestroyView.as_view(), name='performer-detail'),
    path('features/', FeatureListCreateView.as_view(), name='feature-list-create'),
    path('features/<int:pk>/', FeatureRetrieveUpdateDestroyView.as_view(), name='feature-detail'),
    path('testimonials/', TestimonialListCreateView.as_view(), name='testimonial-list-create'),
    path('testimonials/<int:pk>/', TestimonialRetrieveUpdateDestroyView.as_view(), name='testimonial-detail'),
    path('faqs/', FAQListCreateView.as_view(), name='faq-list-create'),
    path('faqs/<int:pk>/', FAQRetrieveUpdateDestroyView.as_view(), name='faq-detail'),
    path('password-reset/', PasswordResetView.as_view(), name='password-reset'),
    path("contact-submissions/", ContactMessageView.as_view(), name="contact-message"),
    path('admin-notifications/mark-read/', AdminNotificationViewSet.as_view({'post': 'mark_as_read'})),
    path('achievement/', AchievementsView.as_view(), name='achievement-list-create'),
    path('achievement/<int:pk>/', AchievementRetrieveUpdateDestroyView.as_view(), name='achievement-detail'),
    path('test-completion-rates/', test_completion_rate_view, name='test_completion_rates'),
    path('register/', RegisterView.as_view(), name='user-register'),
    path('user/test-stats/', UserTestStatsAPIView.as_view(), name='user-test-stats'),
    path('submit-test/', submit_test, name="submit-test"),
    path('user/test-stats/', user_test_stats, name="user-test-stats"),
    path('test/', user_attempted_tests, name="user-attempted-tests"),
    path('leaderboard/', leaderboard, name="leaderboard"),
    path("tests/<int:test_id>/duplicate/", duplicate_test, name="duplicate_test"),
    path("csrf/", get_csrf_token),
    path('complete-test/<int:test_attempt_id>/', complete_test, name='complete_test'),
    path('tests-management/', test_management_view, name='test_management'),
    path("test-attempts/statistics/", TestAttemptViewSet.as_view({"get": "get_user_statistics"}), name="user-statistics"),
    path("test-attempts/rank/<int:test_id>/", TestAttemptViewSet.as_view({"get": "get_user_rank"}), name="user-rank"),
    path('questions/upload/', UploadQuestionsView.as_view(), name='upload-questions'),
    path('', include(router.urls)),
]

# if settings.DEBUG:
#     urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# Django_project/urls.py
from django.contrib import admin
from django.conf import settings
from django.conf.urls.static import static
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),  # Admin panel URL
    path('api/', include('blog.urls')),  # Include URLs from the 'blog' application
]
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)